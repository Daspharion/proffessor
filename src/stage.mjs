import Stage from 'telegraf/stage'
import WizardScene from 'telegraf/scenes/wizard'
import Markup from 'telegraf/markup'
import Extra from 'telegraf/extra'

import { Users } from './models'

const _Stage = new Stage()

const start = new WizardScene('start',
  (ctx) => {
    ctx.reply('–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —Ö—Ç–æ –≤–∏ —î?', Markup
      .keyboard([['üéì –í–∏–∫–ª–∞–¥–∞—á', 'üìì –°—Ç—É–¥–µ–Ω—Ç']])
      .oneTime()
      .resize()
      .extra())
    return ctx.wizard.next()
  },
  (ctx) => {
    const { from, text } = ctx.update.message
    if(text.match(/–≤–∏–∫–ª–∞–¥–∞—á|—Å—Ç—É–¥–µ–Ω—Ç/i)) {
      let type = text.match(/–≤–∏–∫–ª–∞–¥–∞—á/i) ? true : false
      Users.update({ id: from.id }, {
        id: from.id,
        type: type,
        username: from.username,
        firstname: from.first_name,
        lastname: from.last_name
      }, { upsert: true })
        .then(() => { ctx.reply('–°—É–ø–µ—Ä! –ó–∞–ø–∏—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ')})
        .catch(() => { ctx.reply('–ù–µ–≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ')})
      return ctx.scene.leave()
    } else {
      ctx.reply('–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é.')
    }
  }
)


_Stage.register(start)



export default _Stage
